#!/usr/bin/python3
# -*- coding: utf-8 -*-

import socket
import threading
import select
import sys
import time

# Konfigurasi Default
LISTENING_ADDR = '0.0.0.0'
LISTENING_PORT = 0 
PASS = ''

# Konstanta
BUFLEN = 4096 * 4
TIMEOUT = 60
DEFAULT_HOST = '127.0.0.1:109'
RESPONSE = b'HTTP/1.1 101 Switching Protocol\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: foo\r\n\r\n'

class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.running = False
        self.host = host
        self.port = port
        self.threads = []
        self.threadsLock = threading.Lock()
        self.logLock = threading.Lock()

    def run(self):
        self.soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        self.soc.bind((self.host, self.port))
        self.soc.listen(0)
        self.running = True

        try:
            while self.running:
                try:
                    c, addr = self.soc.accept()
                    c.setblocking(True)
                except socket.timeout:
                    continue

                conn = ConnectionHandler(c, self, addr)
                conn.start()
                self.addConn(conn)
        finally:
            self.running = False
            self.soc.close()

    def printLog(self, log):
        with self.logLock:
            print(log)

    def addConn(self, conn):
        with self.threadsLock:
            if self.running:
                self.threads.append(conn)

    def removeConn(self, conn):
        with self.threadsLock:
            if conn in self.threads:
                self.threads.remove(conn)

    def close(self):
        self.running = False
        with self.threadsLock:
            threads = list(self.threads)
            for c in threads:
                c.close()

class ConnectionHandler(threading.Thread):
    def __init__(self, socClient, server, addr):
        threading.Thread.__init__(self)
        self.clientClosed = False
        self.targetClosed = True
        self.client = socClient
        self.client_buffer = b''
        self.server = server
        self.log = f'Connection: {addr}'

    def close(self):
        try:
            if not self.clientClosed:
                self.client.shutdown(socket.SHUT_RDWR)
                self.client.close()
        except OSError:
            pass
        finally:
            self.clientClosed = True

        try:
            if not self.targetClosed:
                self.target.shutdown(socket.SHUT_RDWR)
                self.target.close()
        except OSError:
            pass
        finally:
            self.targetClosed = True

    def run(self):
        try:
            self.client_buffer = self.client.recv(BUFLEN)
            header_text = self.client_buffer.decode('utf-8', errors='ignore')
            hostPort = self.findHeader(header_text, 'X-Real-Host')

            if not hostPort:
                hostPort = DEFAULT_HOST

            if self.findHeader(header_text, 'X-Split'):
                self.client.recv(BUFLEN)

            passwd = self.findHeader(header_text, 'X-Pass')

            allow_connect = False
            if not PASS:
                allow_connect = True
            elif passwd == PASS:
                allow_connect = True
            
            if allow_connect:
                self.method_CONNECT(hostPort)
            else:
                self.client.send(b'HTTP/1.1 401 Unauthorized\r\n\r\n')

        except Exception as e:
            self.log += f' - error: {str(e)}'
            self.server.printLog(self.log)
        finally:
            self.close()
            self.server.removeConn(self)

    def findHeader(self, head, header):
        try:
            aux = head.lower().find(header.lower() + ': ')
            if aux == -1:
                return ''
            
            aux = head.find(':', aux)
            head = head[aux + 2:]
            aux = head.find('\r\n')
            return head[:aux].strip() if aux != -1 else ''
        except:
            return ''

    def connect_target(self, host):
        i = host.find(":")
        if i != -1:
            port = int(host[i+1:])
            host = host[:i]
        else:
            port = 443 
            
        (soc_family, _, _, _, address) = socket.getaddrinfo(host, port)[0]
        self.target = socket.socket(soc_family)
        self.targetClosed = False
        self.target.connect(address)

    def method_CONNECT(self, path):
        self.log += f' - CONNECT {path}'
        self.connect_target(path)
        self.client.sendall(RESPONSE)
        self.client_buffer = b''
        self.server.printLog(self.log)
        self.doCONNECT()

    def doCONNECT(self):
        socs = [self.client, self.target]
        count = 0
        error = False
        while not error:
            count += 1
            (recv, _, err) = select.select(socs, [], socs, 3)
            if err:
                error = True
            if recv:
                for in_ in recv:
                    try:
                        data = in_.recv(BUFLEN)
                        if data:
                            if in_ is self.client:
                                self.target.send(data)
                            else:
                                self.client.send(data)
                            count = 0
                        else:
                            error = True
                            break
                    except OSError:
                        error = True
                        break
            if count > TIMEOUT / 3:
                error = True

def parse_port_argument():
    global LISTENING_PORT
    if len(sys.argv) < 2:
        print("Usage: ./proxy.py <port>")
        print("Error: Port argument is required.")
        sys.exit(2)
    
    try:
        LISTENING_PORT = int(sys.argv[1])
    except ValueError:
        print(f"Error: Invalid port '{sys.argv[1]}'. Port must be a number.")
        sys.exit(2)

def main():
    parse_port_argument()
    
    print("\n:------- Python 3 Proxy -------:")
    print(f"  Listening on: {LISTENING_ADDR}:{LISTENING_PORT}")
    print("--------------------------------\n")
    
    server = Server(LISTENING_ADDR, LISTENING_PORT)
    server.start()
    
    try:
        while True:
            time.sleep(2)
    except KeyboardInterrupt:
        print('\nStopping proxy server...')
        server.close()
        print('Server stopped.')

if __name__ == '__main__':
    main()
